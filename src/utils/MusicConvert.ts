import { FFmpegKit, ReturnCode } from 'ffmpeg-kit-react-native';
import RNFS from 'react-native-fs';

export async function convertVideoToAudio(videoUri: string): Promise<string | null> {
  try {
    console.log('üîπ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi video:', videoUri);

    // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
    const fileExists = await RNFS.exists(videoUri);
    if (!fileExists) {
      console.error('‚ùå L·ªói: File kh√¥ng t·ªìn t·∫°i:', videoUri);
      return null;
    }

    // ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n l∆∞u file (t·∫°o t√™n file m·ªõi tr√°nh tr√πng l·∫∑p)
    const timestamp = Date.now();
    const outputPath = `${RNFS.DocumentDirectoryPath}/converted_audio_${timestamp}.m4a`;

    // N·∫øu file ƒë√£ t·ªìn t·∫°i, x√≥a tr∆∞·ªõc khi convert
    const outputExists = await RNFS.exists(outputPath);
    if (outputExists) {
      await RNFS.unlink(outputPath);
      console.log('üîÑ ƒê√£ x√≥a file c≈©:', outputPath);
    }

    // C√¢u l·ªánh FFmpeg chuy·ªÉn ƒë·ªïi video sang AAC (m4a)
    const ffmpegCommand = `-i "${videoUri}" -vn -c:a aac -b:a 128k "${outputPath}"`;

    console.log('üõ†Ô∏è L·ªánh FFmpeg:', ffmpegCommand);

    // Ch·∫°y l·ªánh FFmpeg
    const session = await FFmpegKit.execute(ffmpegCommand);
    const returnCode = await session.getReturnCode();

    if (ReturnCode.isSuccess(returnCode)){
      console.log('‚úÖ Convert th√†nh c√¥ng:', outputPath);
      return outputPath;
    } else {
      console.error('‚ùå Convert th·∫•t b·∫°i. M√£ l·ªói:', returnCode?.getValue());

      // In l·ªói chi ti·∫øt t·ª´ FFmpeg logs
      const logs = await session.getLogs();
      logs.forEach(log => console.error(log.getMessage()));

      return null;
    }
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh convert:', error);
    return null;
  }
}
